---
- name: Include variables
  ansible.builtin.include_role:
    name: lihas_variables
  when: configspaces is not defined
- name: Lihas_become init
  ansible.builtin.set_fact:
    lihas_become: "{{ lihas_become | default(false) }}"
- name: Check if become is necessary
  ansible.builtin.set_fact:
    lihas_become: true
  when: ansible_effective_user_id != 0
- name: Check if become is necessary
  ansible.builtin.set_fact:
    lihas_become: "yes"
  when: ansible_effective_user_id != "root"
- name: Package facts
  ansible.builtin.package_facts:
    manager: "auto"
- name: Package installation
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - "dehydrated"
    - "sudo"
  loop_control:
    loop_var: item
  become: "{{ lihas_become | default('no') }}"
- name: Package installation apache only
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - "dehydrated-apache2"
  loop_control:
    loop_var: item
  notify: restart_apache2
  become: "{{ lihas_become | default('no') }}"
  when: "'apache2' is in ansible_facts.packages"
- name: Add www-data to ssl-cert
  ansible.builtin.user:
    name: www-data
    groups: ssl-cert
  notify: restart_apache2
  when: "'apache2' is in ansible_facts.packages"
  become: "{{ lihas_become | default('no') }}"
- name: Collect dehydrated reload services
  ansible.builtin.set_fact:
    dehydrated_services_reload: {LIHASVARS.variables.dehydrated_services_reload | default('apache2 postfix')}
    cacheable: false
- name: "Collect rproxy entries {{ configspaces }}"
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] | default({}) | flatten(levels=1) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] is defined
- name: Dehydrated standard config
  ansible.builtin.template:
    dest: "{{ item }}"
    src: "files{{ item }}"
    mode: "0755"
  loop:
    - /etc/dehydrated/conf.d/contact_email.sh
    - /etc/dehydrated/conf.d/group.sh
    - /etc/dehydrated/conf.d/hook_chain.sh
    - /etc/dehydrated/conf.d/hook.sh
    - /usr/local/bin/dehydrated-hook.sh
    - /etc/cron.daily/dehydrated
    - /etc/cron.monthly/dehydrated-cleanup
  loop_control:
    loop_var: item
  notify: run_dehydrated
  become: "{{ lihas_become | default('no') }}"
- name: Create /var/lib/dehydrated/certs
  ansible.builtin.file:
    path: /var/lib/dehydrated/certs
    mode: "0750"
    group: ssl-cert
    owner: root
    state: directory
  become: "{{ lihas_become | default('no') }}"
- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers
# dehydrated test run
- name: Dehydrated create temporary file mktemp
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: dehydratedconf
  changed_when: false
  become: "{{ lihas_become | default('no') }}"
- name: Dehydrated create temporary file content
  ansible.builtin.shell:
    cmd: |
      dehydrated --env |
      sed '
        /^#/d
        s/^declare -- //
        s/^CA=.*/CA="https:\/\/acme-staging-v02.api.letsencrypt.org\/directory"/
        s/^CERTDIR=.*/CERTDIR="\/var\/lib\/dehydrated\/certs-staging"/
        /ACCOUNT/d
      ' > {{ dehydratedconf.path }}
  register: cmd_results
  changed_when: false
  become: "{{ lihas_become | default('no') }}"
- name: "Run dehydrated staging --register"
  ansible.builtin.command: /usr/bin/dehydrated --config {{ dehydratedconf.path }} --register --accept-terms
  changed_when: false
  become: "{{ lihas_become | default('no') }}"
- name: Collect rproxy entries init
  ansible.builtin.set_fact:
    rproxy_domainnames: []
    cacheable: false
  become: "{{ lihas_become | default('no') }}"
- name: Collect rproxy entries LIHASVARS
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ LIHASVARS.roles.rproxy.domains | default({}) | flatten(levels=1) }}"
    cacheable: false
  when: LIHASVARS.roles.rproxy is defined and LIHASVARS.roles.rproxy.domains is defined
  become: "{{ lihas_become | default('no') }}"
- name: "Collect rproxy entries {{ configspaces }}"
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] | default({}) | flatten(levels=1) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] is defined
- name: DEBUG RPROXY after %.roles.rproxy.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
- name: Collect dehydrated entries
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['dehydrated']['domains'] | default({}) | flatten(levels=1) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['dehydrated']['domains'] is defined
  become: "{{ lihas_become | default('no') }}"
- name: DEBUG RPROXY after %.roles.dehydrated.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
- name: Collect external_redirect entries
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains'] | default({}) | flatten(levels=1) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains'] is defined
  become: "{{ lihas_become | default('no') }}"
- name: DEBUG RPROXY after %.roles.external_redirect.domains
  ansible.builtin.debug:
    var: rproxy_domainnames

- name: Collect local_pages entries
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['local_pages']['domains'] | default({}) | flatten(levels=1) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['local_pages']['domains'] is defined
  become: "{{ lihas_become | default('no') }}"
- name: DEBUG RPROXY after %.roles.local_pages.domains
  ansible.builtin.debug:
    var: rproxy_domainnames

- name: Initialize dehydrated_domains
  ansible.builtin.set_fact:
    dehydrated_domains: []
    cacheable: false

- name: Include 60-dehydrated-staging.yml
  ansible.builtin.include_tasks: "60-dehydrated-staging.yml"
  loop: "{{ rproxy_domainnames | default([]) }}"
  loop_control:
    loop_var: item
- name: Dehydrated create temporary file removal
  ansible.builtin.file:
    path: "{{ dehydratedconf.path }}"
    state: absent
  changed_when: false
  become: "{{ lihas_become | default('no') }}"

- name: Create /etc/dehydrated/domains.txt
  ansible.builtin.template:
    dest: "{{ item }}"
    src: "files{{ item }}"
    mode: "0644"
  loop:
    - /etc/dehydrated/domains.txt
  loop_control:
    loop_var: item
  notify: run_dehydrated
  become: "{{ lihas_become | default('no') }}"
- name: "Run dehydrated --register"
  ansible.builtin.command: /usr/bin/dehydrated --register --accept-terms
  changed_when: false
  become: "{{ lihas_become | default('no') }}"
